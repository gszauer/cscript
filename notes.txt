-- EP 1
In the first video i'm probably going to be explaining high level concepts and maybe make the not so good parsers.
By the end of that video, the user should be able to parse and eval something like "2 + 4 * (9 - 3)"
The second video is going to pick right up and try to to go from there

-- EP 2
The goal of the first video is going to be to be able to properly parse and execute

// Let's implement simple line comments too
int result = 2 + 4 * (9 - 3);
int default;
print(result);
print(default);

notes:
Internally, the compiler will gather a massive list of tokens. Whenever a new file is added, it's tokens are added to this list.
When compiling, this list will be fed to a parser, which will output an AST. This AST can be linked with previously serialized AST's.
The first pass AST is context free. It doesn't know types, it doesn't know if it's correct, it only knows that it's valid.

reflections:
I like the way the compiler is being built. 

-- EP 3
The goal of the second video is to start adding types. 

// And comment should work

int iVal = 2 + 4 * (9 - 3);
int iDefault;

float fVal = 3.14f;
float fDefault;

char cVal = 't';
char cDefault;

bool bVal = true;
bool bDefault;

// These should fail

print(default);
print(result);

We're also going to make the type checker functional. For example, this is valid:

char a = 'a';
b = a;

But this isn't:

char c = 7;

And neither is this

int a = 8;
char c = a;

There is no concept of null yet

-- EP 4
Functions

We're going to make functions work.

-- EP 5
Test Framework. Now that functions are working, it makes sense to start creating automated tests.
Automated tests will be divided into 3 categories: success, fail_compile, fail_runtime

-- EP 5
Objects and structs. In addition to implementing structs, and type erasure trough the object type
this section will also introduce the "type" to the language, as well as is, as
type is both a data type and a callable. The callable version of type is what returns the runtime
type of an object.

-- EP 6
Arrays

-- EP 7
Enumerations

-- EP 8
Multi Methods

-- EP 9
Delegates

-- EP 10
Operators

-- EP 11
Control Flow

-- EP 12
Emit Javascript. Also, how does someone do a javascript source map?

-- EP 13
Compiler options. Need to add support for external declarations that the runtime can later hook up.
Also, add the option to pre-compile code for easy distribution. This is static linking only
Maybe also consider beefing up the runtime. Like add arguments to the "Run" function of the interpreter?

-- EP 13
Making a self hosted compiler, and running it online.

-- EP 14
Kind of a stretch, but VS Code Integration?

-- HIGH IDEAS runfor
It's for running a long function that MUST render while displaying a loading screen.
Might need a way to add a last minute saivor function. But that would require
Running to the end of frame pointless, since the 

Example:
void UpdateNavMesh() { // runfor will only work with functions that return nothing and have no dynamic arguments
	// Internally, the functions return type will be replaced with an int. A new function will be made, with a new generated name.
	// That generated name is only ever called at a runfor site
	// I don't know if nested runfor loops should be supported or not. 
	// I think it should be a runtime exception tough, as the inner one could mess up the outer ones timing.
}

runfor 16 UpdateNavMesh(); // This would yield control of execution after 16 milliseconds
runfor UpdateNavMesh(); // This would un tuntil the end of frame (since there is no time)

Yielding is easy as fuck in the dynamic interpreter, since we can just resume execution
at the next expression without worrying about state changes

I'd also consider adding a ms type, for millisecond. It's a non-nullable type.
The default value for it is '0 as ms'. We should be able to cast both integers and floats
to milliseconds with the 'as' keyword. And 'is' should work too. 
ms is also callable, calling it would return the current time in milliseconds (since app startup).
Internally, runfor takes a ms as it's argument, but both int and float are accepted and auto cast