
program -> (declaration)*;

declaration = varDeclStatement | funDeclStatement | structDeclStatement;
varDeclStatement -> IDENTIFIER IDENTIFIER ("=" expression)? ";";
funDeclStatement -> IDENTIFIER IDENTIFIER "(" funParamaters? ")" blockStatement;
structDeclStatement -> "struct" IDENTIFIER "{" varDeclStatement* "}";

statement -> expressionStatement | printStatement | varDeclStatement | blockStatement | typeExpression;
expressionStatement -> expression ";";
printStatement -> "print" "(" expression? ")" ";";
blockStatement -> "{" statement* "}";
returnStatement -> "return" expression? ";";

expression -> assignment | typeExpression;
typeExpression -> "type" "(" "dynamic"? expression ")" ";";
assignment -> (call ".")? IDENTIFIER "=" assignment | isExpression | typeExpression;
isExpression -> add_sub ("is" IDENTIFIER)?;
add_sub -> mul_div (("+" | "-") mul_div)*;
mul_div -> asExpression (("*" | "/") asExpression)*;
asExpression -> unary ("as" IDENTIFIER)?;
unary -> ("!" | "-") unary | call;
call -> primary ("(" callArguments? ")" | "." IDENTIFIER)*;
primary -> NUMBER | IDENTIFIER | CHAR | "true" | "false" | "(" expression ")";

funParamaters -> IDENTIFIER IDENTIFIER ("," IDENTIFIER IDENTIFIER )*;
callArguments -> expression ("," expression)*;